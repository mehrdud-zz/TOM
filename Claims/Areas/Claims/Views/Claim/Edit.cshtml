@model ModelsLayer.Claim

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Home/WillisMaster_CRUD.cshtml";
}

<h2>Edit: Claim</h2>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(false)

    <fieldset> 

        @Html.HiddenFor(model => model.ClaimID)


        @Html.HiddenFor(model => model.ClaimTemplateID)
        @Html.HiddenFor(model => model.WillisEmployeeID)
        @Html.HiddenFor(model => model.CreatedBy)
        @Html.HiddenFor(model => model.UserID)

        <div class="editor-label">
            @Html.LabelFor(model => model.UserID)
        </div>
        <div class="editor-field">
            @Html.DisplayFor(model => model.UserID)
            
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ClaimStatusID, "ClaimStatu")
        </div>
        <div class="editor-field">
            @(Html.Kendo().DropDownList()
                    .Name("ClaimStatusID")
                    .HtmlAttributes(new { style = "width:100%;" })
                    .OptionLabel("Select field...")
                    .DataTextField("Title")
                    .DataValueField("Value")
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("GetClaimStatus", "ClaimStatus", new { area = "Claims" });
                        });
                    })
            )
            @Html.ValidationMessageFor(model => model.ClaimStatusID)
        </div>



        <div class="editor-label">
            @Html.LabelFor(model => model.CountryID)
        </div>
        <div class="editor-field">
            @(Html.Kendo().DropDownList()
                    .Name("CountryID")
                    .HtmlAttributes(new { style = "width:100%;" })
                    .OptionLabel("Select field...")
                    .DataTextField("Title")
                    .DataValueField("Value")
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("GetCountries", "Countries", new { area = "Claims" });
                        });
                    })
            )
            @Html.ValidationMessageFor(model => model.CountryID)
        </div>

        

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Description)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Description)
            @Html.ValidationMessageFor(model => model.Description)
        </div>
        <br />




        @Html.Action("FieldsListEditExistingClaim", "CustomTemplate", new { area = "Claims", id = Model.ClaimID })

        <div class="buttons">
            <input type="submit" value="Save" />
            <input type="button" value="Back to List" onclick="changeWindowLocation('/Claims/Claim');" />
        </div>
    </fieldset>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
